package com.randonautica.app.Attractors;

import android.animation.ValueAnimator;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.res.Configuration;
import android.graphics.Color;
import android.location.Location;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import androidx.annotation.NonNull;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolygonOptions;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.randonautica.app.Classes.AttractorLocation;
import com.randonautica.app.Classes.DatabaseHelper;
import com.randonautica.app.Classes.PseudoAttractorLocation;
import com.randonautica.app.Classes.SingleRecyclerViewLocation;
import com.randonautica.app.Interfaces.API_Classes.GoAttractors;
import com.randonautica.app.Interfaces.API_Classes.Point;
import com.randonautica.app.Interfaces.API_Classes.PseudoAttractor;
import com.randonautica.app.Interfaces.API_Classes.Sizes;
import com.randonautica.app.Interfaces.RandoWrapperApi;
import com.randonautica.app.Interfaces.RandonautAttractorListener;
import com.randonautica.app.MainActivity;
import com.randonautica.app.RandonautFragment;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

import okhttp3.OkHttpClient;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

import static java.lang.Math.atan2;
import static java.lang.Math.cos;
import static java.lang.Math.sin;
import static java.lang.Math.sqrt;

public class GenerateAttractors extends Activity {

    //Pseudo range
    private int N;

    //Contains locations generated by attractor functions
    public static ArrayList<SingleRecyclerViewLocation> locationList = new ArrayList<>();

    //initialize Classes
    DatabaseHelper mDatabaseHelper;
    RandoWrapperApi randoWrapperApi;
    ProgressDialog progressdialog;

    //Database tables to store attractors
    String attractorTable = "Attractors";
    String voidTable = "Voids";
    String anomalyTable = "Anomalies";

    public void getAttractors(final View view, final GoogleMap mapboxMap, final Context context,
                              final String GID, final boolean pool, final boolean temporal, final boolean gcp, final String selected, final int distance, final FusedLocationProviderClient mFusedLocationProviderClient, final RandonautAttractorListener randonautDialogsListener) {
        //Empty previous run
        locationList = new ArrayList<>();
        mapboxMap.clear();

        //Start ProgressDialog
        progressdialog = new ProgressDialog(context);
        progressdialog.setMessage("Looking for " + selected + "s " + "please wait....");
        progressdialog.show();
        progressdialog.setCancelable(false);
        progressdialog.setCanceledOnTouchOutside(false);

        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
                .connectTimeout(175, TimeUnit.SECONDS)
                .readTimeout(175, TimeUnit.SECONDS)
                .writeTimeout(175, TimeUnit.SECONDS)
                .build();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(new String(Base64.decode(RandonautFragment.getBaseApi(), Base64.DEFAULT)))
                .client(okHttpClient)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        randoWrapperApi = retrofit.create(RandoWrapperApi.class);


        final Task location = mFusedLocationProviderClient.getLastLocation();
        location.addOnCompleteListener(new OnCompleteListener() {
            @Override
            public void onComplete(@NonNull Task task) {
                if (task.isSuccessful()) {

                    final Location currentLocation = (Location) task.getResult();

                    Call<GoAttractors> callGetAttractors = randoWrapperApi.getAttractors(GID,
                            currentLocation.getLatitude(), currentLocation.getLongitude(), distance, pool, temporal, gcp);
                    callGetAttractors.enqueue(new Callback<GoAttractors>() {
                        @Override
                        public void onResponse(Call<GoAttractors> call, Response<GoAttractors> response) {
                            try {
                                int i = 0;
                                int count = 0;
                                int amount = 0;


                                for (Point attractors : response.body().getPoints()) {
                                    count++;
                                }

                                AttractorLocation attractorLocations[] = new AttractorLocation[count];

                                for (int attractorcount = 0; attractorcount < count; attractorcount++) {

                                    //First Part
                                    double GID = response.body().getPoints().get(attractorcount).getGID();
                                    double TID = response.body().getPoints().get(attractorcount).getTID();
                                    double LID = response.body().getPoints().get(attractorcount).getLID();
                                    double type = response.body().getPoints().get(attractorcount).getType();
                                    double x_ = response.body().getPoints().get(attractorcount).getX();
                                    double y_ = response.body().getPoints().get(attractorcount).getY();

                                    //Second part
                                    double x = response.body().getPoints().get(attractorcount).getCenter().getPoint().getLatitude(); //Used in map
                                    double y = response.body().getPoints().get(attractorcount).getCenter().getPoint().getLongitude(); //Used in map

                                    double distance = response.body().getPoints().get(attractorcount).getCenter().getBearing().getDistance();
                                    double initialBearing = response.body().getPoints().get(attractorcount).getCenter().getBearing().getInitialBearing();
                                    double finalBearing = response.body().getPoints().get(attractorcount).getCenter().getBearing().getFinalBearing();

                                    //Third part
                                    double side = response.body().getPoints().get(attractorcount).getSide();
                                    double distanceErr = response.body().getPoints().get(attractorcount).getDistanceErr();
                                    double radiusM = response.body().getPoints().get(attractorcount).getRadiusM();
                                    double n = response.body().getPoints().get(attractorcount).getN();
                                    double mean = response.body().getPoints().get(attractorcount).getMean();
                                    double rarity = response.body().getPoints().get(attractorcount).getRarity();
                                    double power_old = response.body().getPoints().get(attractorcount).getPowerOld();
                                    double power = response.body().getPoints().get(attractorcount).getPower();
                                    double z_score = response.body().getPoints().get(attractorcount).getZScore();
                                    double probability_single = response.body().getPoints().get(attractorcount).getProbabilitySingle();
                                    double integral_score = response.body().getPoints().get(attractorcount).getIntegralScore();
                                    double significance = response.body().getPoints().get(attractorcount).getSignificance();
                                    double probability = response.body().getPoints().get(attractorcount).getProbability();

                                    //#TODO: FIX FILTERING SIGNIFICANCE IN GOWRAPPER
                                    int FILTERING_SIGNIFICANCE = 4;

                                    attractorLocations[i] = new AttractorLocation(new LatLng(x, y), GID, TID, LID, x_, y_, distance, initialBearing, finalBearing, side, distanceErr, radiusM, n, mean, rarity, power_old, probability_single, integral_score, significance, probability, FILTERING_SIGNIFICANCE, type, radiusM, power, z_score);
                                    amount++;
                                    i++;
                                }

                                if (amount > 0) {

                                    if (selected == "Attractor") {
                                        int position = getMaxAttractor(attractorLocations);
                                        if (position == -1) {
                                            //Nothhing was found
                                            createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);

                                        } else {
                                            //Make databaseHelper
                                            mDatabaseHelper = new DatabaseHelper(context, attractorTable);
//
                                            Marker marker = mapboxMap.addMarker(new MarkerOptions()
                                                    .position(new LatLng(attractorLocations[position].getCoordinate().latitude, attractorLocations[position].getCoordinate().longitude))
                                                    .title("Attractor"));

                                            marker.showInfoWindow();

                                            addPulsatingEffect(new LatLng(attractorLocations[position].getCoordinate().latitude, attractorLocations[position].getCoordinate().longitude), mapboxMap, (int) attractorLocations[position].getRadiusM());

                                            RandonautFragment.atts++;

                                            SingleRecyclerViewLocation singleLocation = new SingleRecyclerViewLocation();
                                            singleLocation.setType((attractorLocations[position].getType()));
                                            singleLocation.setRadiusm((attractorLocations[position].getRadiusM()));
                                            singleLocation.setPower((attractorLocations[position].getPower()));
                                            singleLocation.setZ_score((attractorLocations[position].getZ_score()));
                                            singleLocation.setLocationCoordinates(attractorLocations[position].getCoordinate());
                                            singleLocation.setPsuedo(false);
                                            //getRoutesToAllPoints(attractorLocations[i].getCoordinate());

                                            AddData(attractorTable,
                                                    attractorLocations[position].getCoordinate().latitude,
                                                    attractorLocations[position].getCoordinate().longitude,
                                                    attractorLocations[position].getGID(),
                                                    attractorLocations[position].getTID(),
                                                    attractorLocations[position].getLID(),

                                                    attractorLocations[position].getX(),
                                                    attractorLocations[position].getY(),
                                                    attractorLocations[position].getDistance(),
                                                    attractorLocations[position].getInitialBearing(),
                                                    attractorLocations[position].getFinalBearing(),
                                                    attractorLocations[position].getSide(),
                                                    attractorLocations[position].getDistanceErr(),
                                                    attractorLocations[position].getRadiusM(),
                                                    attractorLocations[position].getN(),
                                                    attractorLocations[position].getMean(),
                                                    attractorLocations[position].getRarity(),
                                                    attractorLocations[position].getPower_old(),
                                                    attractorLocations[position].getProbability_single(),
                                                    attractorLocations[position].getIntegral_score(),
                                                    attractorLocations[position].getSignificance(),
                                                    attractorLocations[position].getProbability(),
                                                    attractorLocations[position].getFILTERING_SIGNIFICANCE(),
                                                    attractorLocations[position].getType(),
                                                    attractorLocations[position].getRadiusM(),
                                                    attractorLocations[position].getPower(),
                                                    attractorLocations[position].getZ_score(),
                                                    0, 0);

                                            locationList.add(singleLocation);

                                        }


                                    }
                                    if (selected == "Void") {
                                        int position = getMaxVoid(attractorLocations);
                                        if (position == -1) {
                                            //Nothhing was found
                                            createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);
                                        } else {
                                            //Make databaseHelper
                                            mDatabaseHelper = new DatabaseHelper(context, attractorTable);
//
                                            Marker marker = mapboxMap.addMarker(new MarkerOptions()
                                                    .position(new LatLng(attractorLocations[position].getCoordinate().latitude, attractorLocations[position].getCoordinate().longitude))
                                                    .title("Void"));

                                            marker.showInfoWindow();

                                            addPulsatingEffect(new LatLng(attractorLocations[position].getCoordinate().latitude, attractorLocations[position].getCoordinate().longitude), mapboxMap, (int) attractorLocations[position].getRadiusM());

                                            RandonautFragment.atts++;

                                            SingleRecyclerViewLocation singleLocation = new SingleRecyclerViewLocation();
                                            singleLocation.setType((attractorLocations[position].getType()));
                                            singleLocation.setRadiusm((attractorLocations[position].getRadiusM()));
                                            singleLocation.setPower((attractorLocations[position].getPower()));
                                            singleLocation.setZ_score((attractorLocations[position].getZ_score()));
                                            singleLocation.setLocationCoordinates(attractorLocations[position].getCoordinate());
                                            singleLocation.setPsuedo(false);
                                            //getRoutesToAllPoints(attractorLocations[i].getCoordinate());

                                            AddData(attractorTable,
                                                    attractorLocations[position].getCoordinate().latitude,
                                                    attractorLocations[position].getCoordinate().longitude,
                                                    attractorLocations[position].getGID(),
                                                    attractorLocations[position].getTID(),
                                                    attractorLocations[position].getLID(),

                                                    attractorLocations[position].getX(),
                                                    attractorLocations[position].getY(),
                                                    attractorLocations[position].getDistance(),
                                                    attractorLocations[position].getInitialBearing(),
                                                    attractorLocations[position].getFinalBearing(),
                                                    attractorLocations[position].getSide(),
                                                    attractorLocations[position].getDistanceErr(),
                                                    attractorLocations[position].getRadiusM(),
                                                    attractorLocations[position].getN(),
                                                    attractorLocations[position].getMean(),
                                                    attractorLocations[position].getRarity(),
                                                    attractorLocations[position].getPower_old(),
                                                    attractorLocations[position].getProbability_single(),
                                                    attractorLocations[position].getIntegral_score(),
                                                    attractorLocations[position].getSignificance(),
                                                    attractorLocations[position].getProbability(),
                                                    attractorLocations[position].getFILTERING_SIGNIFICANCE(),
                                                    attractorLocations[position].getType(),
                                                    attractorLocations[position].getRadiusM(),
                                                    attractorLocations[position].getPower(),
                                                    attractorLocations[position].getZ_score(),
                                                    0, 0);

                                            locationList.add(singleLocation);

                                        }


                                    }
                                    if (selected == "Anomalie") {
                                        for (int c = count - 1; c > 0; c--) { //Start bubblesort
                                            for (int j = 0; j < c; j++) {
                                                if (attractorLocations[j + 1] == null) {
                                                    continue;
                                                }
                                                if (attractorLocations[j] == null || attractorLocations[j + 1].compareTo(attractorLocations[j]) < 0) {
                                                    AttractorLocation temp = attractorLocations[j + 1];
                                                    attractorLocations[j + 1] = attractorLocations[j];
                                                    attractorLocations[j] = temp;
                                                }
                                            }
                                        } //End bubblesort

                                        //Make databaseHelper
                                        mDatabaseHelper = new DatabaseHelper(context, anomalyTable);

                                        if (attractorLocations[0].getType() == 1) {
                                            Marker marker = mapboxMap.addMarker(new MarkerOptions()
                                                    .position(new LatLng(attractorLocations[0].getCoordinate().latitude, attractorLocations[0].getCoordinate().longitude))
                                                    .title("Attractor"));

                                            marker.showInfoWindow();

                                        } else {
                                            Marker marker = mapboxMap.addMarker(new MarkerOptions()
                                                    .position(new LatLng(attractorLocations[0].getCoordinate().latitude, attractorLocations[0].getCoordinate().longitude))
                                                    .title("Void"));

                                            marker.showInfoWindow();

                                        }


                                        addPulsatingEffect(new LatLng(attractorLocations[0].getCoordinate().latitude, attractorLocations[0].getCoordinate().longitude), mapboxMap, (int) attractorLocations[0].getRadiusM());

                                        //  amount++;
                                        RandonautFragment.anomalies++;
                                        SingleRecyclerViewLocation singleLocation = new SingleRecyclerViewLocation();
                                        singleLocation.setType((attractorLocations[0].getType()));
                                        singleLocation.setRadiusm((attractorLocations[0].getRadiusM()));
                                        singleLocation.setPower((attractorLocations[0].getPower()));
                                        singleLocation.setZ_score((attractorLocations[0].getZ_score()));
                                        singleLocation.setLocationCoordinates(attractorLocations[0].getCoordinate());
                                        singleLocation.setPsuedo(false);

                                        AddData(anomalyTable,
                                                attractorLocations[0].getCoordinate().latitude,
                                                attractorLocations[0].getCoordinate().longitude,
                                                attractorLocations[0].getGID(),
                                                attractorLocations[0].getTID(),
                                                attractorLocations[0].getLID(),

                                                attractorLocations[0].getX(),
                                                attractorLocations[0].getY(),
                                                attractorLocations[0].getDistance(),
                                                attractorLocations[0].getInitialBearing(),
                                                attractorLocations[0].getFinalBearing(),
                                                attractorLocations[0].getSide(),
                                                attractorLocations[0].getDistanceErr(),
                                                attractorLocations[0].getRadiusM(),
                                                attractorLocations[0].getN(),
                                                attractorLocations[0].getMean(),
                                                attractorLocations[0].getRarity(),
                                                attractorLocations[0].getPower_old(),
                                                attractorLocations[0].getProbability_single(),
                                                attractorLocations[0].getIntegral_score(),
                                                attractorLocations[0].getSignificance(),
                                                attractorLocations[0].getProbability(),
                                                attractorLocations[0].getFILTERING_SIGNIFICANCE(),
                                                attractorLocations[0].getType(),
                                                attractorLocations[0].getRadiusM(),
                                                attractorLocations[0].getPower(),
                                                attractorLocations[0].getZ_score(),
                                                0, 0);

                                        locationList.add(singleLocation);


                                    } //End anomaly

                                    randonautDialogsListener.onData(locationList);
                                    RandonautFragment.startButton.setVisibility(View.GONE);
                                    // navigateButton.setVisibility(View.VISIBLE);
                                    RandonautFragment.resetButton.setVisibility(View.VISIBLE);
                                } else {
                                    //Nothhing was found
                                    createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);
                                }

                                //saveData();
                                progressdialog.dismiss();

                            }catch (Exception e) {
                                // This will catch any exception, because they are all descended from Exception
                                createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);

                            }
                        }

                        @Override
                        public void onFailure(Call<GoAttractors> call, Throwable t) {
                            progressdialog.dismiss();
                            createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);
                        }


                    });
                } else {
                    Toast.makeText(getApplicationContext(), "unable to get current location", Toast.LENGTH_SHORT).show();
                }

            }
        });
    }

    public void getAttractorsTwo(final View view, final GoogleMap mapboxMap, final Context context,
                              final String GID, final boolean pool, final boolean temporal, final boolean gcp, final String selected, final int distance, final FusedLocationProviderClient mFusedLocationProviderClient, final RandonautAttractorListener randonautDialogsListener) {
        //Empty previous run
        locationList = new ArrayList<>();
        mapboxMap.clear();

        //Start ProgressDialog
        progressdialog = new ProgressDialog(context);
        progressdialog.setMessage("Looking for " + selected + "s " + "please wait....");
        progressdialog.show();
        progressdialog.setCancelable(false);
        progressdialog.setCanceledOnTouchOutside(false);

        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
                .connectTimeout(175, TimeUnit.SECONDS)
                .readTimeout(175, TimeUnit.SECONDS)
                .writeTimeout(175, TimeUnit.SECONDS)
                .build();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(new String(Base64.decode(RandonautFragment.getBaseApi(), Base64.DEFAULT)))
                .client(okHttpClient)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        randoWrapperApi = retrofit.create(RandoWrapperApi.class);


        final Task location = mFusedLocationProviderClient.getLastLocation();
        location.addOnCompleteListener(new OnCompleteListener() {
            @Override
            public void onComplete(@NonNull Task task) {
                if (task.isSuccessful()) {

                    final Location currentLocation = (Location) task.getResult();

                    Call<GoAttractors> callGetAttractors = randoWrapperApi.getAttractorsUpgrade(GID,
                            currentLocation.getLatitude(), currentLocation.getLongitude(), distance, pool, temporal, gcp, selected);
                    callGetAttractors.enqueue(new Callback<GoAttractors>() {
                        @Override
                        public void onResponse(Call<GoAttractors> call, Response<GoAttractors> response) {
                            try {
                                int i = 0;
                                int count = 0;
                                int amount = 0;
                                boolean water = false;

                                for (Point attractors : response.body().getPoints()) {
                                    count++;
                                }

                                AttractorLocation attractorLocations[] = new AttractorLocation[count];

                                for (int attractorcount = 0; attractorcount < count; attractorcount++) {

                                    //First Part
                                    double GID = response.body().getPoints().get(attractorcount).getGID();
                                    double TID = response.body().getPoints().get(attractorcount).getTID();
                                    double LID = response.body().getPoints().get(attractorcount).getLID();
                                    double type = response.body().getPoints().get(attractorcount).getType();
                                    double x_ = response.body().getPoints().get(attractorcount).getX();
                                    double y_ = response.body().getPoints().get(attractorcount).getY();

                                    //Second part
                                    double x = response.body().getPoints().get(attractorcount).getCenter().getPoint().getLatitude(); //Used in map
                                    double y = response.body().getPoints().get(attractorcount).getCenter().getPoint().getLongitude(); //Used in map

                                    double distance = response.body().getPoints().get(attractorcount).getCenter().getBearing().getDistance();
                                    double initialBearing = response.body().getPoints().get(attractorcount).getCenter().getBearing().getInitialBearing();
                                    double finalBearing = response.body().getPoints().get(attractorcount).getCenter().getBearing().getFinalBearing();

                                    //Third part
                                    double side = response.body().getPoints().get(attractorcount).getSide();
                                    double distanceErr = response.body().getPoints().get(attractorcount).getDistanceErr();
                                    double radiusM = response.body().getPoints().get(attractorcount).getRadiusM();
                                    double n = response.body().getPoints().get(attractorcount).getN();
                                    double mean = response.body().getPoints().get(attractorcount).getMean();
                                    double rarity = response.body().getPoints().get(attractorcount).getRarity();
                                    double power_old = response.body().getPoints().get(attractorcount).getPowerOld();
                                    double power = response.body().getPoints().get(attractorcount).getPower();
                                    double z_score = response.body().getPoints().get(attractorcount).getZScore();
                                    double probability_single = response.body().getPoints().get(attractorcount).getProbabilitySingle();
                                    double integral_score = response.body().getPoints().get(attractorcount).getIntegralScore();
                                    double significance = response.body().getPoints().get(attractorcount).getSignificance();
                                    double probability = response.body().getPoints().get(attractorcount).getProbability();
                                    water = response.body().getPoints().get(attractorcount).isWater();
                                    //#TODO: FIX FILTERING SIGNIFICANCE IN GOWRAPPER
                                    int FILTERING_SIGNIFICANCE = 4;

                                    attractorLocations[i] = new AttractorLocation(new LatLng(x, y), GID, TID, LID, x_, y_, distance, initialBearing, finalBearing, side, distanceErr, radiusM, n, mean, rarity, power_old, probability_single, integral_score, significance, probability, FILTERING_SIGNIFICANCE, type, radiusM, power, z_score);
                                    amount++;
                                    i++;
                                }

                                if (amount > 0 && water == false) {
                                    Marker marker;
                                    if (attractorLocations[0].getType() == 1) {
                                        marker = mapboxMap.addMarker(new MarkerOptions()
                                                .position(new LatLng(attractorLocations[0].getCoordinate().latitude, attractorLocations[0].getCoordinate().longitude))
                                                .title("Attractor"));

                                        marker.showInfoWindow();

                                    } else {
                                        marker = mapboxMap.addMarker(new MarkerOptions()
                                                .position(new LatLng(attractorLocations[0].getCoordinate().latitude, attractorLocations[0].getCoordinate().longitude))
                                                .title("Void"));

                                        marker.showInfoWindow();

                                    }
                                            //Make databaseHelper
                                            mDatabaseHelper = new DatabaseHelper(context, attractorTable);

                                            marker.showInfoWindow();

                                            addPulsatingEffect(new LatLng(attractorLocations[0].getCoordinate().latitude, attractorLocations[0].getCoordinate().longitude), mapboxMap, (int) attractorLocations[0].getRadiusM());

                                            RandonautFragment.atts++;

                                            SingleRecyclerViewLocation singleLocation = new SingleRecyclerViewLocation();
                                            singleLocation.setType((attractorLocations[0].getType()));
                                            singleLocation.setRadiusm((attractorLocations[0].getRadiusM()));
                                            singleLocation.setPower((attractorLocations[0].getPower()));
                                            singleLocation.setZ_score((attractorLocations[0].getZ_score()));
                                            singleLocation.setLocationCoordinates(attractorLocations[0].getCoordinate());
                                            singleLocation.setPsuedo(false);
                                            //getRoutesToAllPoints(attractorLocations[i].getCoordinate());

                                            AddData(attractorTable,
                                                    attractorLocations[0].getCoordinate().latitude,
                                                    attractorLocations[0].getCoordinate().longitude,
                                                    attractorLocations[0].getGID(),
                                                    attractorLocations[0].getTID(),
                                                    attractorLocations[0].getLID(),

                                                    attractorLocations[0].getX(),
                                                    attractorLocations[0].getY(),
                                                    attractorLocations[0].getDistance(),
                                                    attractorLocations[0].getInitialBearing(),
                                                    attractorLocations[0].getFinalBearing(),
                                                    attractorLocations[0].getSide(),
                                                    attractorLocations[0].getDistanceErr(),
                                                    attractorLocations[0].getRadiusM(),
                                                    attractorLocations[0].getN(),
                                                    attractorLocations[0].getMean(),
                                                    attractorLocations[0].getRarity(),
                                                    attractorLocations[0].getPower_old(),
                                                    attractorLocations[0].getProbability_single(),
                                                    attractorLocations[0].getIntegral_score(),
                                                    attractorLocations[0].getSignificance(),
                                                    attractorLocations[0].getProbability(),
                                                    attractorLocations[0].getFILTERING_SIGNIFICANCE(),
                                                    attractorLocations[0].getType(),
                                                    attractorLocations[0].getRadiusM(),
                                                    attractorLocations[0].getPower(),
                                                    attractorLocations[0].getZ_score(),
                                                    0, 0);

                                            locationList.add(singleLocation);

                                    randonautDialogsListener.onData(locationList);
                                    RandonautFragment.startButton.setVisibility(View.GONE);
                                    // navigateButton.setVisibility(View.VISIBLE);
                                    RandonautFragment.resetButton.setVisibility(View.VISIBLE);
                                } else {
                                    //Nothhing was found
                                    createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);
                                }

                                //saveData();
                                progressdialog.dismiss();

                            }catch (Exception e) {
                                // This will catch any exception, because they are all descended from Exception
                                createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);

                            }
                        }

                        @Override
                        public void onFailure(Call<GoAttractors> call, Throwable t) {
                            progressdialog.dismiss();
                            createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);
                        }


                    });
                } else {
                    Toast.makeText(getApplicationContext(), "unable to get current location", Toast.LENGTH_SHORT).show();
                }

            }
        });
    }


    public int getMaxAnomaly(AttractorLocation[] list) {
        double max = Integer.MIN_VALUE;
        int position = -1;
        for (int i = 0; i < list.length; i++) {
            if (list[i].getPower() > max) {
                max = list[i].getPower();
                position = i;
            }
        }
        return position;
    }

    public int getMaxAttractor(AttractorLocation[] list) {
        double max = Integer.MIN_VALUE;
        int position = -1;
        for (int i = 0; i < list.length; i++) {
            if (list[i].getPower() > max && list[i].getType() == 1) {
                max = list[i].getPower();
                position = i;
            }
        }
        return position;
    }

    public int getMaxVoid(AttractorLocation[] list) {
        double result = 0;
        int position = -1;

        for (int i = 0; i < list.length; i++) {
            if (list[i].getZ_score() < 0 && list[i].getType() == 2) {
                if (result == 0 || list[i].getZ_score() < result) {
                    result = list[i].getZ_score();
                    position = i;
                }
            }
        }
        return position;
    }

    public void getPsuedo(final View view, final GoogleMap mapboxMap, final Context context,
                          final int distance, final String selected, final FusedLocationProviderClient mFusedLocationProviderClient, final RandonautAttractorListener randonautDialogsListener) {

        //Empty previous run
        locationList = new ArrayList<>();
        mapboxMap.clear(); //Test this in a second
        // removeRecyclerView(view);

        //Start ProgressDialog
        progressdialog = new ProgressDialog(context);
        progressdialog.setMessage("Looking for " + selected + "s " + "please wait....");
        progressdialog.show();
        progressdialog.setCancelable(false);
        progressdialog.setCanceledOnTouchOutside(false);

        OkHttpClient okHttpClient = new OkHttpClient().newBuilder()
                .connectTimeout(175, TimeUnit.SECONDS)
                .readTimeout(175, TimeUnit.SECONDS)
                .writeTimeout(175, TimeUnit.SECONDS)
                .build();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(new String(Base64.decode(RandonautFragment.getBaseApi(), Base64.DEFAULT)))
                .client(okHttpClient)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        randoWrapperApi = retrofit.create(RandoWrapperApi.class);

        Call<Sizes> callGetSizes = randoWrapperApi.getSizes(distance);

        callGetSizes.enqueue(new Callback<Sizes>() {
            @Override
            public void onResponse(Call<Sizes> call, Response<Sizes> response) {

                N = response.body().getN();

                final Task location = mFusedLocationProviderClient.getLastLocation();
                location.addOnCompleteListener(new OnCompleteListener() {
                    @Override
                    public void onComplete(@NonNull Task task) {
                        if (task.isSuccessful()) {

                            final Location currentLocation = (Location) task.getResult();

                            int seed = 0;
                            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                                seed = ThreadLocalRandom.current().nextInt(0, 2147483647);
                            } else {
                                seed = 23;
                            }

                            Call<List<PseudoAttractor>> callGetPsuedo = randoWrapperApi.getPsuedo(N,
                                    currentLocation.getLatitude(), currentLocation.getLongitude(), distance, seed, 4);

                            callGetPsuedo.enqueue(new Callback<List<PseudoAttractor>>() {
                                @Override
                                public void onResponse(Call<List<PseudoAttractor>> call, Response<List<PseudoAttractor>> response) {
                                    try{
                                        int i = 0;
                                        int count = 0;
                                        int amount = 0;

                                        for (PseudoAttractor psuedos : response.body()) {
                                            count++;
                                        }

                                        PseudoAttractorLocation attractorLocations[] = new PseudoAttractorLocation[count];


                                        for (PseudoAttractor psuedos : response.body()) {

                                            //First Part
                                            String GID = psuedos.getGID();
                                            String TID = psuedos.getTID();
                                            String LID = psuedos.getLID();
                                            double type = psuedos.getType();
                                            double x_ = psuedos.getX();
                                            double y_ = psuedos.getY();

                                            //Second part
                                            double x = psuedos.getLatitude(); //Used in map
                                            double y = psuedos.getLongitude(); //Used in map

                                            double distance = psuedos.getDistance();
                                            double initialBearing = psuedos.getInitialBearing();
                                            double finalBearing = psuedos.getFinalBearing();

                                            //Third part
                                            double side = psuedos.getSide();
                                            double distanceErr = psuedos.getDistanceErr();
                                            double radiusM = psuedos.getRadiusM();
                                            double n = psuedos.getN();
                                            double mean = psuedos.getMean();
                                            double rarity = psuedos.getRarity();
                                            double power_old = psuedos.getPower_old();
                                            double power = psuedos.getPower();
                                            double z_score = psuedos.getZ_score();
                                            double probability_single = psuedos.getProbability_single();
                                            double integral_score = psuedos.getIntegral_score();
                                            double significance = psuedos.getSignificance();
                                            double probability = psuedos.getProbability();
                                            double FILTERING_SIGNIFICANCE = psuedos.getFILTERING_SIGNIFICANCE();

                                            //##TODO: FIX THE GID/TID/UID FOR PSEUDO AND ATTRACTORS
                                            attractorLocations[i] = new PseudoAttractorLocation(new LatLng(x, y), 3333, 3333, 3333, x_, y_, distance, initialBearing, finalBearing, side, distanceErr, radiusM, n, mean, rarity, power_old, probability_single, integral_score, significance, probability, FILTERING_SIGNIFICANCE, type, radiusM, power, z_score);


                                            amount++;

                                            i++;

                                        }

                                        if (amount > 0) {
                                            i = 0;
                                            if (attractorLocations[i].getType() == 1) {

                                                mDatabaseHelper = new DatabaseHelper(context, attractorTable);

                                                Marker marker = mapboxMap.addMarker(new MarkerOptions()
                                                        .position(new LatLng(attractorLocations[i].getX(), attractorLocations[i].getY()))
                                                        .title("Pseudo Attractor"));

                                                marker.showInfoWindow();

                                                addPulsatingEffect(new LatLng(attractorLocations[i].getX(), attractorLocations[i].getY()), mapboxMap, (int) attractorLocations[i].getRadiusM());

                                                amount++;
                                                RandonautFragment.psuedo++;
                                                SingleRecyclerViewLocation singleLocation = new SingleRecyclerViewLocation();
                                                singleLocation.setType((attractorLocations[i].getType()));
                                                singleLocation.setRadiusm((attractorLocations[i].getRadiusm()));
                                                singleLocation.setPower((attractorLocations[i].getPower()));
                                                singleLocation.setZ_score((attractorLocations[i].getZ_score()));
                                                singleLocation.setLocationCoordinates(new LatLng(attractorLocations[i].getCoordinate().latitude, attractorLocations[i].getCoordinate().longitude));
                                                singleLocation.setPsuedo(true);

                                                locationList.add(singleLocation);

                                                AddData(voidTable,
                                                        attractorLocations[i].getCoordinate().latitude,
                                                        attractorLocations[i].getCoordinate().longitude,
                                                        attractorLocations[i].getGID(),
                                                        attractorLocations[i].getTID(),
                                                        attractorLocations[i].getLID(),

                                                        attractorLocations[i].getX(),
                                                        attractorLocations[i].getY(),
                                                        attractorLocations[i].getDistance(),
                                                        attractorLocations[i].getInitialBearing(),
                                                        attractorLocations[i].getFinalBearing(),
                                                        attractorLocations[i].getSide(),
                                                        attractorLocations[i].getDistanceErr(),
                                                        attractorLocations[i].getRadiusM(),
                                                        attractorLocations[i].getN(),
                                                        attractorLocations[i].getMean(),
                                                        attractorLocations[i].getRarity(),
                                                        attractorLocations[i].getPower_old(),
                                                        attractorLocations[i].getProbability_single(),
                                                        attractorLocations[i].getdoubleegral_score(),
                                                        attractorLocations[i].getSignificance(),
                                                        attractorLocations[i].getProbability(),
                                                        attractorLocations[i].getFILTERING_SIGNIFICANCE(),
                                                        attractorLocations[i].getType(),
                                                        attractorLocations[i].getRadiusM(),
                                                        attractorLocations[i].getPower(),
                                                        attractorLocations[i].getZ_score(),
                                                        1, 0);

                                                //initRecyclerView(context, view, mapboxMap);
                                                randonautDialogsListener.onData(locationList);
                                                RandonautFragment.startButton.setVisibility(View.GONE);
                                                //   navigateButton.setVisibility(View.VISIBLE);
                                                RandonautFragment.resetButton.setVisibility(View.VISIBLE);

                                            }

                                            if (attractorLocations[i].getType() == 2) {
                                                i = 0;

                                                mDatabaseHelper = new DatabaseHelper(context, voidTable);

                                                Marker marker = mapboxMap.addMarker(new MarkerOptions()
                                                        .position(new LatLng(attractorLocations[i].getX(), attractorLocations[i].getY()))
                                                        .title("Pseudo Void"));

                                                marker.showInfoWindow();

                                                addPulsatingEffect(new LatLng(attractorLocations[i].getX(), attractorLocations[i].getY()), mapboxMap, (int) attractorLocations[i].getRadiusM());

                                                amount++;
                                                RandonautFragment.psuedo++;
                                                SingleRecyclerViewLocation singleLocation = new SingleRecyclerViewLocation();
                                                singleLocation.setType((attractorLocations[i].getType()));
                                                singleLocation.setRadiusm((attractorLocations[i].getRadiusm()));
                                                singleLocation.setPower((attractorLocations[i].getPower()));
                                                singleLocation.setZ_score((attractorLocations[i].getZ_score()));
                                                singleLocation.setLocationCoordinates(attractorLocations[i].getCoordinate());
                                                singleLocation.setPsuedo(true);

                                                locationList.add(singleLocation);

                                                AddData(voidTable,
                                                        attractorLocations[i].getCoordinate().latitude,
                                                        attractorLocations[i].getCoordinate().longitude,
                                                        attractorLocations[i].getGID(),
                                                        attractorLocations[i].getTID(),
                                                        attractorLocations[i].getLID(),

                                                        attractorLocations[i].getX(),
                                                        attractorLocations[i].getY(),
                                                        attractorLocations[i].getDistance(),
                                                        attractorLocations[i].getInitialBearing(),
                                                        attractorLocations[i].getFinalBearing(),
                                                        attractorLocations[i].getSide(),
                                                        attractorLocations[i].getDistanceErr(),
                                                        attractorLocations[i].getRadiusM(),
                                                        attractorLocations[i].getN(),
                                                        attractorLocations[i].getMean(),
                                                        attractorLocations[i].getRarity(),
                                                        attractorLocations[i].getPower_old(),
                                                        attractorLocations[i].getProbability_single(),
                                                        attractorLocations[i].getdoubleegral_score(),
                                                        attractorLocations[i].getSignificance(),
                                                        attractorLocations[i].getProbability(),
                                                        attractorLocations[i].getFILTERING_SIGNIFICANCE(),
                                                        attractorLocations[i].getType(),
                                                        attractorLocations[i].getRadiusM(),
                                                        attractorLocations[i].getPower(),
                                                        attractorLocations[i].getZ_score(),
                                                        1, 0);

                                                //initRecyclerView(context, view, mapboxMap);
                                                randonautDialogsListener.onData(locationList);
                                                RandonautFragment.startButton.setVisibility(View.GONE);
                                                //   navigateButton.setVisibility(View.VISIBLE);
                                                RandonautFragment.resetButton.setVisibility(View.VISIBLE);

                                            }


                                        } else {

                                            createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);
                                        }
                                        //   saveData(); -> REMOVE later


                                        progressdialog.dismiss();

                                    }catch (Exception e) {
                                        // This will catch any exception, because they are all descended from Exception
                                        createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);

                                    }

                                }

                                @Override
                                public void onFailure(Call<List<PseudoAttractor>> call, Throwable t) {
                                    createDialogEmptyResults(context, selected, currentLocation.getLatitude(), currentLocation.getLongitude(), distance, randonautDialogsListener, mapboxMap);
                                    progressdialog.dismiss();
                                }
                            });


                        } else {
                            Toast.makeText(getApplicationContext(), "unable to get current location", Toast.LENGTH_SHORT).show();
                        }
                    }
                });


            }

            @Override
            public void onFailure(Call<Sizes> call, Throwable t) {

            }

        });
    }


    private void addPulsatingEffect(final LatLng userLatlng, final GoogleMap map, int radius) {

        int colorOutline = Color.RED;
        int colorInner = 0x22FF0000;

        if (RandonautFragment.lastPulseAnimator != null) {
            RandonautFragment.lastPulseAnimator.cancel();
        }
        if (RandonautFragment.lastUserCircle != null) {
            RandonautFragment.lastUserCircle.remove();
            RandonautFragment.lastUserCircle.setCenter(userLatlng);
        }

        final int finalColorOutline = colorOutline;
        final int finalColorInner = colorInner;
        RandonautFragment.lastPulseAnimator = valueAnimate(getDisplayPulseRadius(radius, map), RandonautFragment.pulseDuration, new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                if (RandonautFragment.lastUserCircle != null)
                    RandonautFragment.lastUserCircle.setRadius((Float) animation.getAnimatedValue());
                else {
                    RandonautFragment.lastUserCircle = map.addCircle(new CircleOptions()
                            .center(userLatlng)
                            .radius(getDisplayPulseRadius((Float) animation.getAnimatedValue(), map))
                            .strokeColor(finalColorOutline));
                    //.fillColor(Color.BLUE));
                    RandonautFragment.lastUserCircle.setFillColor(adjustAlpha(finalColorInner, 1 - animation.getAnimatedFraction()));


                }
            }
        });

    }

//    private void addPulsatingEffectPsuedo(final LatLng userLatlng, final GoogleMap map, int radius) {
//        if (lastPulseAnimator != null) {
//            lastPulseAnimator.cancel();
//        }
//        if (lastUserCircle != null)
//            lastUserCircle.setCenter(userLatlng);
//
//        lastPulseAnimator = valueAnimate(getDisplayPulseRadius(radius, map), pulseDuration, new ValueAnimator.AnimatorUpdateListener() {
//            @Override
//            public void onAnimationUpdate(ValueAnimator animation) {
//                if (lastUserCircle != null) {
//                 //   Random rnd = new Random();
//               ///     int color = Color.argb(255, rnd.nextInt(256), rnd.nextInt(256), rnd.nextInt(256));
//                    lastUserCircle.setRadius((Float) animation.getAnimatedValue());
//                   // lastUserCircle.setFillColor(color);
//                } else {
//
//                    lastUserCircle = map.addCircle(new CircleOptions()
//                            .center(userLatlng)
//                            .radius(getDisplayPulseRadius((Float) animation.getAnimatedValue(), map))
//                            //.strokeColor(0x220000));
//                          //  .strokeColor(Color.RED));
//                 //           .strokeColor(Color.BLACK));
//                       //   .strokeColor(Color.GRAY));
//        //                  .strokeColor(Color.WHITE));
////                          .strokeColor(Color.GREEN));
//                          .strokeColor(Color.BLUE));
//
//
//
//        //                  .strokeColor(0x10613173));
//        //                  .strokeColor(	0xFFA500)));
//        //                  .strokeColor(Color.RED));
//
//                    //.fillColor(Color.BLUE));
//                    //Test
//                    lastUserCircle.setFillColor(adjustAlpha(0x220000FF, 1 - animation.getAnimatedFraction()));
//                    //Black
//
//                    //Gray
//
//                    //White
//
//                    //Green
//
//                    //Blue
//
//                    //Purple
//
//                    //Orange
//
//                    //Light gold
//
//                    //Rainbow
//
//                    //Octarine
//
//                }
//            }
//        });
//
//    }

    private int adjustAlpha(int color, float factor) {
        int alpha = Math.round(Color.alpha(color) * factor);
        int red = Color.red(color);
        int green = Color.green(color);
        int blue = Color.blue(color);
        return Color.argb(alpha, red, green, blue);
    }

    protected ValueAnimator valueAnimate(float accuracy, long duration, ValueAnimator.AnimatorUpdateListener updateListener) {
        ValueAnimator va = ValueAnimator.ofFloat(0, accuracy);
        va.setDuration(duration);
        va.addUpdateListener(updateListener);
        va.setRepeatCount(ValueAnimator.INFINITE);
        va.setRepeatMode(ValueAnimator.RESTART);

        va.start();
        return va;
    }

    protected float getDisplayPulseRadius(float radius, @NotNull GoogleMap map) {
        float diff = 1;
        if (diff < 3)
            return radius;
        if (diff < 3.7)
            return radius * (diff / 2);
        if (diff < 4.5)
            return (radius * diff);
        if (diff < 5.5)
            return (radius * diff) * 1.5f;
        if (diff < 7)
            return (radius * diff) * 2f;
        if (diff < 7.8)
            return (radius * diff) * 3.5f;
        if (diff < 8.5)
            return (float) (radius * diff) * 5;
        if (diff < 10)
            return (radius * diff) * 10f;
        if (diff < 12)
            return (radius * diff) * 18f;
        if (diff < 13)
            return (radius * diff) * 28f;
        if (diff < 16)
            return (radius * diff) * 40f;
        if (diff < 18)
            return (radius * diff) * 60;
        return (radius * diff) * 80;
    }

    public void createDialogEmptyResults(Context context, String selected, final double lat, final double lon, final int radius, final RandonautAttractorListener randonautDialogsListener, final GoogleMap mapboxMap) {

        new AlertDialog.Builder(context)
                .setTitle("No " + selected + "s found")
                .setMessage("No anomalies currently detected in the area, supplying a pseudo-point for you instead.")

                // Specifying a listener allows you to take an action before dismissing the dialog.
                // The dialog is automatically dismissed when a dialog button is clicked.
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        // Continue with delete operation
                        // getQuantumRandom(lat, lon, radius);

                        double[] testresutlt = getQuantumRandom(lat, lon, radius);

                        Marker marker = mapboxMap.addMarker(new MarkerOptions()
                                .position(new LatLng(testresutlt[0], testresutlt[1]))
                                .title("Void"));

                        marker.showInfoWindow();

                        Location loc = new Location("dummy");
                        loc.setLatitude(testresutlt[0]);
                        loc.setLongitude(testresutlt[1]);

                        addPulsatingEffect(new LatLng(testresutlt[0], testresutlt[1]), mapboxMap, 50);

//                        //Generate Circle
//                        mapboxMap.addPolygon(generatePerimeter(
//                                new LatLng(testresutlt[0], testresutlt[1]),
//                                (attractorLocations[i].getRadiusM()/1000),
//                                64));


                        SingleRecyclerViewLocation singleLocation = new SingleRecyclerViewLocation();

                        singleLocation.setType(0);
                        singleLocation.setLocationCoordinates(new LatLng(testresutlt[0], testresutlt[1]));

                        locationList.add(singleLocation);
                        randonautDialogsListener.onFailed(locationList);
                        RandonautFragment.startButton.setVisibility(View.GONE);
                        //   navigateButton.setVisibility(View.VISIBLE);
                        RandonautFragment.resetButton.setVisibility(View.VISIBLE);
                        dialog.dismiss();

                    }
                })
                .setIcon(android.R.drawable.ic_dialog_alert)
                .show();
    }

    public static double[] getQuantumRandom(double lat, double lon, int radius) {
        double[] result = new double[2];

        Boolean dnn = false;
        while (dnn == false) {
            double lat01 = lat + radius * cos(180 * Math.PI / 180) / (6371000 * Math.PI / 180);
            double dlat = ((lat + radius / (6371000 * Math.PI / 180)) - lat01) * 1000000;
            double lon01 = lon + radius * sin(270 * Math.PI / 180) / cos(lat * Math.PI / 180) / (6371000 * Math.PI / 180);
            double dlon = ((lon + radius * sin(90 * Math.PI / 180) / cos(lat * Math.PI / 180) / (6371000 * Math.PI / 180)) - lon01) * 1000000;
            double lat1 = lat;
            double lon1 = lon;
            double rlat;
            double rlon;
            rlat = ThreadLocalRandom.current().nextInt(0, (int) dlat);
            rlon = ThreadLocalRandom.current().nextInt(0, (int) dlon);
            lat1 = lat01 + (rlat / 1000000);
            lon1 = lon01 + (rlon / 1000000);
            int dif = GetDistance(lat, lon, lat1, lon1);
            if (dif > radius) {
            } else {
                result[0] = lat1;
                result[1] = lon1;
                dnn = true;
            }
        }
        return result;
    }

    public static int GetDistance(double lat0, double lon0, double lat1, double lon1) {
        double dlon = (lon1 - lon0) * Math.PI / 180;
        double dlat = (lat1 - lat0) * Math.PI / 180;

        double a = (sin(dlat / 2) * sin(dlat / 2)) + cos(lat0 * Math.PI / 180) * cos(lat1 * Math.PI / 180) * (sin(dlon / 2) * sin(dlon / 2));
        double angle = 2 * atan2(sqrt(a), sqrt(1 - a));
        return (int) (angle * 6371000);
    }

    /**
     * Draw circle on the mapview
     *
     * @return
     */
    public PolygonOptions generatePerimeter(LatLng centerCoordinates, double radiusInKilometers, int numberOfSides) {
        List<LatLng> positions = new ArrayList<>();
        double distanceX = radiusInKilometers / (111.319 * cos(centerCoordinates.latitude * Math.PI / 180));
        double distanceY = radiusInKilometers / 110.574;

        double slice = (2 * Math.PI) / numberOfSides;

        double theta;
        double x;
        double y;
        LatLng position;
        for (int i = 0; i < numberOfSides; ++i) {
            theta = i * slice;
            x = distanceX * cos(theta);
            y = distanceY * sin(theta);

            position = new LatLng(centerCoordinates.latitude + y,
                    centerCoordinates.longitude + x);
            positions.add(position);
        }
        return new PolygonOptions()
                .addAll(positions)
                .fillColor(Color.BLUE);
        //.alpha(0.4f);
    }

    //Write to Database
    //#TODO: FIX THE GID/TID/LID
    public void AddData(String table, double x, double y, double GID, double TID, double LID, double x_, double y_, double distance, double initialBearing, double finalBearing, Double side, double distanceErr, double radiusM, Double n, double mean, Double rarity, double power_old, double probability_single, double integral_score, double significance, double probability, double FILTERING_SIGNIFICANCE, double type, double radiusm, double power, double z_score, double pseudo, int report) {
        boolean insertData = mDatabaseHelper.addData(table, x, y, GID, TID, LID, x_, y_, distance, initialBearing, finalBearing, side, distanceErr, radiusM, n, mean, rarity, power_old, probability_single, integral_score, significance, probability, FILTERING_SIGNIFICANCE, type, radiusm, power, z_score, pseudo, report);

        if (insertData) {

        } else {

        }
    }


}